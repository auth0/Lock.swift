skip_docs
opt_out_usage

fastlane_version "2.27.0"

default_platform :ios

platform :ios do

  desc "Installs dependencies using Carthage"
  lane :dependencies do |options|
    action = options[:action]
    carthage(use_binaries: false, command: action, cache_builds: true, platform: 'iOS')
  end

  desc "Bootstrap the development environment"
  lane :bootstrap do
    dependencies
  end

  desc "Run code linter"
  lane :lint do
    swiftlint(
      mode: :lint,
      config_file: '.swiftlint.yml'
    )
  end

  desc "Runs all the tests"
  lane :test do |options|
    scheme = options[:scheme]
    device = options[:device]
    scan(
      scheme: scheme,
      device: device,
      clean: true,
      skip_build: true,
      output_types: 'junit'
      )
  end

  desc "Runs all the tests in a CI environment"
  lane :ci do
    i18n(silent: true) # Generate base strings file
    # ensure_git_status_clean # Until we add dangerfile check if there are changes this way
    scheme = ENV["SCHEME"]
    UI.user_error!("You must supply a valid scheme in 'SCHEME' env variable") if scheme.nil?
    options = {
      scheme: scheme,
      device: ENV["DEVICE"]
    }
    test(options)
    lint
  end

  lane :i18n do |options|
    fastlane_require 'set'

    Entry = Struct.new(:key, :value, :comment)

    keys = Set.new

    matches = Dir['../Lock/**/*.swift']
      .map { |file| File.read(file).scan(/\"(.+)".i18n\(key:\s{0,1}"(.+)",\s{0,1}comment:\s{0,1}"(.+)"\)/) }
      .select { |l| !l.empty? }
      .flatten(1)
      .map { |l| Entry.new(l[1], l[0], l[2]) }
      .sort { |x,y| x.key <=> y.key }

    UI.message "Matched #{matches.count} i18n strings" unless options[:silent]

    unique = matches.select { |x| keys.add?(x.key) }
    UI.message "Found #{unique.count} unique i18n strings" unless options[:silent]

    UI.header "Base.lproj/Lock.strings" unless options[:silent]
    ENV["FASTLANE_HIDE_TIMESTAMP"] = "true"
    lines = unique.map do |entry|
      "// #{entry.comment}\n\"#{entry.key}\" = \"#{entry.value}\";"
    end
    File.open("../Lock/Base.lproj/Lock.strings", "w") do |f|
      lines.each do |line|
        f.puts line
        UI.message line unless options[:silent]
      end
    end
    ENV["FASTLANE_HIDE_TIMESTAMP"] = "false"
  end

  desc "Releases the library to Cocoapods & Github Releases and updates README/CHANGELOG"
  desc "You need to specify the type of release with the `bump` parameter with the values [major|minor|patch]"
  lane :release do |options|
    release_options = {repository: 'Lock.swift', xcodeproj: 'Lock.xcodeproj'}.merge(options)
    prepare_release release_options
    publish_release
  end
end
